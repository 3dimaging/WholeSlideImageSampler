{
    "docs": [
        {
            "location": "/",
            "text": "Whole-Slide-Image sampler",
            "title": "Home"
        },
        {
            "location": "/#whole-slide-image-sampler",
            "text": "",
            "title": "Whole-Slide-Image sampler"
        },
        {
            "location": "/slide_sampler/",
            "text": "modules.slide_sampler\n\n\n\nslide_sampler.py\n\n\nSlide_Sampler\n\n\n\nSlide_Sampler(self, wsi_file, desired_downsampling, size)\n\n\n\n\nA WSI patch sampler. Samples patches of a given size at desired downsampling\n\n\nImportant are:\n- self.wsi - an OpenSlide object of the multi-resolution WSI specified by wsi_file.\n- self.background_mask - a background mask (generate with self.generate_background_mask()). Stored as a numpy array where 1.0 denotes tissue.\n- self.annotation_mask - a multi-resolution binary annotation mask. Must have a level with the desired downsampling.\n\n\nsave_WSI_thumbnail\n\n\n\nSlide_Sampler.save_WSI_thumbnail(self, dir='/home/peter/projects_/slide_loader/docs_builder')\n\n\n\n\nSave a thumbnail of the WSI\n\n\nget_classed_patch\n\n\n\nSlide_Sampler.get_classed_patch(self, verbose=0)\n\n\n\n\nGet a random patch from the WSI.\nAccept if over 90% is non-background.\nAlso return class as part of info dict. info['class'].\n\n\ncheck_patch\n\n\n\nSlide_Sampler.check_patch(self, x)\n\n\n\n\nDivide by 255.0 if x.max > 1.0. And ensure float.\n\n\nprint_slide_properties\n\n\n\nSlide_Sampler.print_slide_properties(self)\n\n\n\n\nPrint some WSI properties\n\n\ngenerate_background_mask\n\n\n\nSlide_Sampler.generate_background_mask(self, desired_downsampling=32, threshold=4, disk_radius=10)\n\n\n\n\nGenerate a background mask. That is a binary (0.0 vs 1.0), downsampled image where 1.0 denotes a tissue region.\nThis is achieved by otsu thresholding on the saturation channel followed by morphological closing and opening to remove noise.\nThe mask desired downsampling factor has a default of 32. For a WSI captured at 40X this corresponds to 1.25X.\nA moderate threshold is used to account for the fact that the desired downsampling may not be available.\nIf an appropriate level is not found an exception is raised.\n\n\npickle_load_background_mask\n\n\n\nSlide_Sampler.pickle_load_background_mask(self, file)\n\n\n\n\nLoad a background mask and meta data\n\n\nget_level_and_downsampling\n\n\n\nSlide_Sampler.get_level_and_downsampling(self, mri, desired_downsampling, threshold)\n\n\n\n\nGet the level and downsampling for a desired downsampling.\nA threshold is used to allow for not exactly equal desired and true downsampling.\nIf an appropriate level is not found an exception is raised.\n\n\nParameters\n\n\n\n\nmri\n: A multi-resolution-image OpenSlide object\n\n\n\n\nsave_annotation_thumbnail\n\n\n\nSlide_Sampler.save_annotation_thumbnail(self, dir='/home/peter/projects_/slide_loader/docs_builder')\n\n\n\n\nSave a thumbnail visualizing the annotation\n\n\nsave_background_mask_visualization\n\n\n\nSlide_Sampler.save_background_mask_visualization(self, dir='/home/peter/projects_/slide_loader/docs_builder')\n\n\n\n\nSave a visualization of the background mask.\n\n\nlevel_converter\n\n\n\nSlide_Sampler.level_converter(self, x, lvl_in, lvl_out, round=1)\n\n\n\n\nConvert a coordinate 'x' at lvl_in from lvl_in to lvl_out\n\n\nget_patch\n\n\n\nSlide_Sampler.get_patch(self, with_info=1)\n\n\n\n\nGet a random patch from the WSI.\nAccept if over 90% is non-background\nIf with_info return patch as well as info dict\n\n\npickle_background_mask\n\n\n\nSlide_Sampler.pickle_background_mask(self, dir='/home/peter/projects_/slide_loader/docs_builder')\n\n\n\n\nSave the background mask and meta data\n\n\nadd_annotation_mask\n\n\n\nSlide_Sampler.add_annotation_mask(self, annotation_mask_file)\n\n\n\n\nAdd a multi-resolution annotation mask",
            "title": "slide_sampler"
        }
    ]
}